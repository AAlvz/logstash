input {
  file {
    path => "/home/aalvarez/logstash/logs/millionlines"
    start_position => beginning
    sincedb_path => "/dev/null"
  }
}

filter {
  if [path] =~ "million" {
    mutate {
      replace => { "type" => "test" }
    }
  }
    grok {
      patterns_dir => "/home/aalvz/logstash/patterns_logstash"
      match => {"message" => '%{NGINXACCESS}'}
    }

    geoip {
      source => "[clientip]"
    }

    anonymize {
      fields => ["clientip"]
      algorithm => "SHA1"
      remove_field => ["clientip"]
      key => "4cb9c8a8048fd02294477fcb1a41191a"
    }

    grok {
      match => {"request" => '%{URIPATH:resource}'}
    }

    mutate {
      split  => ["[lang]", ","]
      add_field => ["lang_real", "%{[lang][0]}"]
      add_field => ["ip_agent", "%{clientip}%{agent}"]
    }

    useragent {
      source => "[agent]"
    }

    kv {
      source => "[request]"
      field_split => "&?"
    }

    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }

}

output {
  #stdout { codec => rubydebug }
  if "_grokparsefailure" in [tags] {
    #stdout { codec => rubydebug }
    file {
      path => "/var/log/logstash/grok_failures"
      codec => line
    }
  } else {
    stdout { codec => dots }
    elasticsearch {
      host => localhost
      protocol => "http"
    }
  }
}

input {
  file {
    path => "/tmp/apache_logs"
    start_position => beginning
    sincedb_path => "/dev/null"
  }
}

filter {
  if [path] =~ "apache" {
    mutate {
      replace => { "type" => "apache_access" }
    }
    if [message] and "addonVersion" in [message] {
      grok {
        match => {"message" => '%{IPV4} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{URIPATH}\?%{GREEDYDATA:variable}=%{DATA:addonName}&addonVersion=%{DATA:addonVersion}&application=%{DATA:application}&applicationVersion=%{DATA:applicationVersion}&platform=%{DATA:platform}&platformVersion=%{DATA:platformVersion}&lastVersion=%{DATA:lastVersion} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:strangeValue}" "%{GREEDYDATA:useragent}" %{QS:symbol} %{WORD:http} %{QS:lang} %{QS:server} %{QS:lastsymbol}'} ## This filter works for  /antiadblockfilters.txt? request
        # grok debbuger "(?<hostabp>[a-zA-Z0-9._-]+\.adblockplus\.org)"
      }
    } else {
        grok {
          patterns_dir => "/vagrant/logstash_patterns"
          match => {"message" => '%{COMBINEDAPACHELOG} "-" https %{QS:lang} "%{HOSTABP:hostabp}" %{QS:abpV}'}
        }
    }
    mutate {
      split  => ["[lang]", ","]
      add_field => ["lang_real", "%{[lang][0]}"]
    }

    useragent {
      source => "[useragent]"
    }
  }
  date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
}

output {
  stdout { codec => rubydebug }
  if "_grokparsefailure" in [tags] {
    stdout { codec => rubydebug }
    file {
      path => "/vagrant/logs/output_tcp_failed"
    }
  } else {
      stdout { codec => rubydebug }
  }
}

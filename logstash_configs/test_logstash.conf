input {
  file {
    path => "/tmp/apache_logs"
    start_position => beginning
    sincedb_path => "/dev/null"
  }
}

filter {
  if [path] =~ "apache" {
    mutate {
      replace => { "type" => "apache_access" }
    }
    if [message] and "addonVersion" in [message] {
      grok {
        match => {"message" => '%{IPV4} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{GREEDYDATA:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:strangeValue}" "%{GREEDYDATA:agent}" %{QS:symbol} %{WORD:http} %{QS:lang} %{QS:server} %{QS:lastsymbol}'} ## This filter works for  /antiadblockfilters.txt? request

        # grok debbuger "(?<hostabp>[a-zA-Z0-9._-]+\.adblockplus\.org)"

        ## Use this line with the commented splits below. LS > 1.5
        ## match => {"message" => '%{COMBINEDAPACHELOG} %{QS:symbol} %{WORD:http} %{QS:lang} %{QS:server} %{QS:lastsymbol}'}
      }
    } else {
        grok {
          patterns_dir => "/vagrant/logstash_patterns"
          match => {"message" => '%{COMBINEDAPACHELOG} "-" https %{QS:lang} "%{HOSTABP:hostabp}" %{QS:abpV}'}
        }
    }
    mutate {
      split  => ["[lang]", ","]
      add_field => ["lang_real", "%{[lang][0]}"]

      # This works only with LS > 1.5
      #split => ["[request]", "?"]
      #split => ["[request][&]", "&"]
    }

    grok {
      match => {"request" => '%{URIPATH:request_uripath}\?%{GREEDYDATA:request_variable}=%{DATA:request_addonName}&addonVersion=%{DATA:request_addonVersion}&application=%{DATA:request_application}&applicationVersion=%{DATA:request_applicationVersion}&platform=%{DATA:request_platform}&platformVersion=%{DATA:request_platformVersion}&lastVersion=%{DATA:request_lastVersion}' }
    }

    useragent {
      source => "[agent]"
    }

  }
  date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
}

output {
  stdout { codec => rubydebug }
  if "_grokparsefailure" in [tags] {
    stdout { codec => rubydebug }
    file {
      path => "/vagrant/logs/output_tcp_failed"
    }
  } else {
      stdout { codec => rubydebug }
  }
}
